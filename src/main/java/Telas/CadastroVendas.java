/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Telas;

import DAO.ClienteDao;
import DAO.ComboDao;
import DAO.PagamentoDao;
import DAO.ProdutoDao;
import DAO.VendasDao;
import java.awt.HeadlessException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import model.acessorio_venda;
import model.acessorios;
import model.cartao;
import model.cliente;
import model.funcionario;
import model.pix;
import model.venda;

/**
 *
 * @author julianob
 */
public class CadastroVendas extends javax.swing.JFrame {

    private int linhaSelecionada;
    private char Status;
    private String Cargo;

    /**
     * Creates new form CadastroVendas
     */
    public CadastroVendas() {
        initComponents();
        CarregarJtable();
        PreenchercomboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        ComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        TextoClienteNome = new javax.swing.JTextField();
        TextoData = new javax.swing.JFormattedTextField();
        Limpar = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jpix = new javax.swing.JCheckBox();
        jcartao = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabela = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        quantidade = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuBar = new javax.swing.JMenu();
        RelatorioF = new javax.swing.JMenuItem();
        RelatorioC = new javax.swing.JMenuItem();
        AdcFuncionario = new javax.swing.JMenuItem();
        ExcluirFuncionario = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(176, 208, 212));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Funcionario");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Cadastro de Vendas");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("nome do cliente :");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Data  :");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("selecione o Produto :");

        TextoClienteNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextoClienteNomeKeyReleased(evt);
            }
        });

        try {
            TextoData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        Limpar.setText("Limpar campos");
        Limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimparActionPerformed(evt);
            }
        });

        jButton3.setText("Cadastrar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jpix.setText("Pix");

        jcartao.setText("Cartao");

        Tabela.setForeground(new java.awt.Color(0, 0, 0));
        Tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome ", "descrição", "Cor", "Valor"
            }
        ));
        Tabela.setFocusable(false);
        Tabela.setGridColor(new java.awt.Color(204, 0, 255));
        Tabela.setInheritsPopupMenu(true);
        Tabela.setOpaque(false);
        Tabela.setSelectionBackground(new java.awt.Color(0, 0, 0));
        Tabela.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane2.setViewportView(Tabela);

        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Digite a quantidade");

        quantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantidadeActionPerformed(evt);
            }
        });
        quantidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quantidadeKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42)))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TextoData)
                            .addComponent(TextoClienteNome)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(337, 337, 337)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jcartao)
                            .addComponent(jLabel6))
                        .addGap(61, 61, 61)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpix))))
                .addContainerGap(88, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(234, 234, 234)
                .addComponent(Limpar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(156, 156, 156))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(306, 306, 306))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(quantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(232, 232, 232))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel7)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextoClienteNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextoData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(95, 95, 95)))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcartao)
                    .addComponent(jpix))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Limpar)
                    .addComponent(jButton3))
                .addGap(52, 52, 52))
        );

        MenuBar.setText("Menu");
        MenuBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuBarActionPerformed(evt);
            }
        });

        RelatorioF.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        RelatorioF.setText("Relatorio Funcionario");
        RelatorioF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RelatorioFActionPerformed(evt);
            }
        });
        MenuBar.add(RelatorioF);

        RelatorioC.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        RelatorioC.setText("Relatorio cliente");
        RelatorioC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RelatorioCActionPerformed(evt);
            }
        });
        MenuBar.add(RelatorioC);

        AdcFuncionario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        AdcFuncionario.setText("adicionar funcionario");
        AdcFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdcFuncionarioActionPerformed(evt);
            }
        });
        MenuBar.add(AdcFuncionario);

        ExcluirFuncionario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        ExcluirFuncionario.setText("excluir funcionario");
        ExcluirFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcluirFuncionarioActionPerformed(evt);
            }
        });
        MenuBar.add(ExcluirFuncionario);

        jMenuBar1.add(MenuBar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimparActionPerformed
        ComboBox.setSelectedIndex(0);
        TextoClienteNome.setText("");
        TextoData.setText("");
        quantidade.setText("");
        jcartao.setSelected(false);
        jpix.setSelected(false);
        
// TODO add your handling code here:
    }//GEN-LAST:event_LimparActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String categoria = (String) ComboBox.getSelectedItem();
        funcionario funcionarioDao = new funcionario();
        venda venda = new venda();
        acessorio_venda acessoriovenda = new acessorio_venda();
        cliente cliente = new cliente();
        ClienteDao clienteDao = new ClienteDao();
        VendasDao vd = new VendasDao();

        if (TextoClienteNome.getText().isEmpty() || TextoData.getText().isEmpty() || quantidade.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Preencha todos os campos.");
        } else {
            ComboDao combo = new ComboDao();

            try {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                LocalDate d = LocalDate.parse(TextoData.getText(), formatter);
                LocalDate dataAtual = LocalDate.now();

                if (d.compareTo(dataAtual) > 0) {
                    JOptionPane.showMessageDialog(null, "Insira uma data válida.");
                } else {
                    linhaSelecionada = Tabela.getSelectedRow();
                    if (linhaSelecionada == -1) {
                        JOptionPane.showMessageDialog(null, "Selecione um produto na tabela.");
                    } else {
                        int idProduto = (int) Tabela.getValueAt(linhaSelecionada, 0);

                        // Informar que o produto foi comprado no banco de dados
                        ProdutoDao produtoDao = new ProdutoDao();
                        acessorios acessorio = produtoDao.buscarProdutoPorId(idProduto);
                        acessoriovenda.setAcessorios(acessorio);
                        int quantidadeTotal = Integer.parseInt(quantidade.getText());
                        String quantidade=String.valueOf(quantidadeTotal);
                        String valor=String.valueOf(acessorio.getValor());
                        
                        
                        
                        Double de=Double.parseDouble(valor)* Double.parseDouble(quantidade);
                        
                        String NomeC = TextoClienteNome.getText();
                        cliente.setNome(NomeC);
                        cliente existeCliente = clienteDao.buscarClientePorNome(NomeC);

                        if (existeCliente != null) {
                            venda.setCliente(existeCliente);

                            double valorTotalGasto = clienteDao.calcularValorTotal(NomeC);

                            if (valorTotalGasto >= 300) 
                            {

                                JOptionPane.showMessageDialog(null, "cliente com desconto");
                                double descontoPercentual = 0.30; // 30% de desconto
                                int quantidadeDesconto = (int) (de * descontoPercentual);
                                de -= quantidadeDesconto;
                                JOptionPane.showMessageDialog(null, "com o desconto a quantidade total de produto registrado sera de : " + quantidadeTotal);

                                if (quantidadeTotal <= 0) {
                                    quantidadeTotal = 1;
                                    JOptionPane.showMessageDialog(null, "Pelo menos você tem que pagar por 1 produto : " + quantidadeTotal);
                                }
                            }
                        }
                        else 
                        {
                            clienteDao.CadastrarCliente(cliente);
                            cliente clienteCadastrado = clienteDao.buscarClientePorNome(NomeC);
                            venda.setCliente(clienteCadastrado);
                        }

                        venda.setData_venda(d);
                        funcionarioDao.setId(combo.obterIdFuncionario(categoria));
                        venda.setFuncionario(funcionarioDao);

                        verificarSelecao(venda);
                        verificarSelecaoCartao(venda);

                        vd.cadastrarVenda(venda);
                        int ultimoIdVenda = vd.obterUltimoIdInserido();
                        venda venda2 = vd.voltarVendaId(ultimoIdVenda);
                        acessoriovenda.setVenda(venda2);

                        acessoriovenda.setQuantidade(quantidadeTotal);

                        produtoDao.cadastrarAcessorio_venda(acessoriovenda);

                    }
                    JOptionPane.showMessageDialog(null, "venda cadastrada com sucesso");
                }
            }
            catch (Exception ex) 
            {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Insira uma data no formato dd/MM/yyyy.");
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void RelatorioFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RelatorioFActionPerformed
        if (Cargo.equalsIgnoreCase("gerente") && Status == 'S' || Cargo.equalsIgnoreCase("financeiro") && Status == 'S') {
            RelatorioFuncionario rf = new RelatorioFuncionario();
            rf.setVisible(true);
            rf.setTipoUsuario(Cargo, Status);
        }else {
            JOptionPane.showMessageDialog(null, "Voce não tem acesso a isso");

        }// TODO add your handling code here:
    }//GEN-LAST:event_RelatorioFActionPerformed

    private void RelatorioCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RelatorioCActionPerformed
        if (Cargo.equalsIgnoreCase("gerente") && Status == 'S' || Cargo.equalsIgnoreCase("financeiro") && Status == 'S' || Cargo.equalsIgnoreCase("caixa") && Status == 'S') {
            RelatorioClientes rc = new RelatorioClientes();
            rc.setVisible(true);
     rc.setTipoUsuario(Cargo, Status);
        } else {
            JOptionPane.showMessageDialog(null, "Voce não tem acesso a isso");

        }    // TODO add your handling code here:
    }//GEN-LAST:event_RelatorioCActionPerformed

    private void AdcFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdcFuncionarioActionPerformed
        if (Cargo.equalsIgnoreCase("gerente") && Status == 'S') {
            FuncionarioNovo fn = new FuncionarioNovo();
            fn.setVisible(true);// TODO add your handling code here:
     
        } else {
            JOptionPane.showMessageDialog(null, "Voce não tem acesso a isso");
        }
    }//GEN-LAST:event_AdcFuncionarioActionPerformed

    private void ExcluirFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcluirFuncionarioActionPerformed
        if (Cargo.equalsIgnoreCase("gerente") && Status == 'S') {
            DeletarFuncionarios df = new DeletarFuncionarios();
            df.setVisible(true);// TODO add your handling code here:
        } else {
            JOptionPane.showMessageDialog(null, "Voce não tem acesso a isso");
        }      // TODO add your handling code here:
    }//GEN-LAST:event_ExcluirFuncionarioActionPerformed

    private void quantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantidadeActionPerformed

    private void TextoClienteNomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextoClienteNomeKeyReleased
        TextoClienteNome.setText(TextoClienteNome.getText().replaceAll("[^a-z || A-Z || ]", ""));
        // TODO add your handling code here:
    }//GEN-LAST:event_TextoClienteNomeKeyReleased

    private void quantidadeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantidadeKeyReleased
        quantidade.setText(quantidade.getText().replaceAll("[^0-9 ]", ""));
        // TODO add your handling code here:
    }//GEN-LAST:event_quantidadeKeyReleased

    private void MenuBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuBarActionPerformed

     // TODO add your handling code here:
    }//GEN-LAST:event_MenuBarActionPerformed
     /**
     * Método para verificar a seleção de pagamento do tipo PIX.
     * 
     * @param v A venda a ser atualizada com as informações de pagamento PIX.
     */
    public void verificarSelecao(venda v) {
        pix p = new pix();
        if (jpix.isSelected()) {
            String[] opcoes = {"Telefone", "CPF"};

            JTextField campoTexto = new JTextField();

            Object[] componentes = {"Selecione o tipo:", campoTexto};

            int opcaoSelecionada = JOptionPane.showOptionDialog(null, componentes, "Selecione o tipo de identificação",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

            if (opcaoSelecionada == 0) {

                p.setNome("Telefone");
                p.setChave(campoTexto.getText());
                JOptionPane.showMessageDialog(null, "Telefone: " + p.getNome());
                PagamentoDao pi = new PagamentoDao();
                pi.cadastrar(p);
            } else if (opcaoSelecionada == 1) {
                p.setNome("CPF");
                p.setChave(campoTexto.getText());
                JOptionPane.showMessageDialog(null, "CPF: " + p.getNome());
                PagamentoDao pi = new PagamentoDao();

                pi.cadastrar(p);

            }
            v.setPix(p);
        }
    }

    /**
     * Método para verificar a seleção de pagamento do tipo Cartão (Crédito ou Débito).
     * 
     * @param v A venda a ser atualizada com as informações de pagamento por cartão.
     */
    public void verificarSelecaoCartao(venda v) {
        cartao c = new cartao();
        if (jcartao.isSelected()) {
            String[] opcoes = {"Debito", "Credito"};

            JTextField campoTexto = new JTextField();

            Object[] componentes = {"Selecione o tipo:", campoTexto};

            int opcaoSelecionada = JOptionPane.showOptionDialog(null, componentes, "Selecione o tipo de identificação",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[0]);

            if (opcaoSelecionada == 0) {
                PagamentoDao pi = new PagamentoDao();
                c.setTipo_cartao('D');
                c.setNumero_cartao(campoTexto.getText());
                JOptionPane.showMessageDialog(null, "Debito: " + c.getNumero_cartao());
                pi.cadastrarCartao(c);
            } else if (opcaoSelecionada == 1) {

                c.setTipo_cartao('C');
                c.setNumero_cartao(campoTexto.getText());
                JOptionPane.showMessageDialog(null, "Credito: " + c.getNumero_cartao());
                PagamentoDao pi = new PagamentoDao();
                pi.cadastrarCartao(c);
            }
            v.setCartao(c);
        }
    }
/**
     * Preenche o combo box com a lista de funcionários.
     */
    public void PreenchercomboBox() {
        ComboDao p = new ComboDao();
        List<String> funcionario = p.listarFuncionario();

        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        for (String Funcionario : funcionario) {
            if (!exist(model, Funcionario)) {
                model.addElement(Funcionario);
            }
        }
        ComboBox.setModel(model);
    }

    /**
     * Verifica se um elemento já existe em um modelo de combo box.
     * 
     * @param model     O modelo de combo box.
     * @param categoria O elemento a ser verificado.
     * @return true se o elemento já existe, false caso contrário.
     */
    public boolean exist(DefaultComboBoxModel<String> model, String categoria) {
        for (int i = 0; i < model.getSize(); i++) {
            String elemento = model.getElementAt(i);
            if (elemento != null && elemento.equals(categoria)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Carrega a tabela de produtos com os dados da base de dados.
     */
    public void CarregarJtable() {
        ProdutoDao p = new ProdutoDao();

        List<acessorios> test = p.CarregarListaNaTabela();

        try {
            DefaultTableModel model = (DefaultTableModel) Tabela.getModel();
            model.setRowCount(0);
            if (!test.isEmpty()) {
                for (acessorios pc : test) {
                    int id = pc.getId();
                    String nome = pc.getNome();
                    String descricao = pc.getDescricao();
                    String cor = pc.getCor();
                    double valor = pc.getValor();

                    model.addRow(new Object[]{id, nome, descricao, cor, valor});
                }
            } else {
                JOptionPane.showMessageDialog(null, " ");
            }

        } catch (HeadlessException ex) {
        }
    }

    public void setTipoUsuario(String tipoCargo, char status) {
        this.Cargo = tipoCargo;
        this.Status = status;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroVendas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AdcFuncionario;
    private javax.swing.JComboBox<String> ComboBox;
    private javax.swing.JMenuItem ExcluirFuncionario;
    private javax.swing.JButton Limpar;
    private javax.swing.JMenu MenuBar;
    private javax.swing.JMenuItem RelatorioC;
    private javax.swing.JMenuItem RelatorioF;
    private javax.swing.JTable Tabela;
    private javax.swing.JTextField TextoClienteNome;
    private javax.swing.JFormattedTextField TextoData;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox jcartao;
    private javax.swing.JCheckBox jpix;
    private javax.swing.JTextField quantidade;
    // End of variables declaration//GEN-END:variables
}
